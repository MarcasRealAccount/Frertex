!TokenClasses=[Unknown,Identifier,String,BinaryInteger,OctalInteger,DecimalInteger,HexInteger,Float,HexFloat,Symbol,Comment,MultilineComment];
!Excluded=[Unknown];
!StartTokenClass=Unknown;
!Charset=ASCII;
!States=32;

Unknown {
	NonDigit      => Step + Transition(Identifier);
	Digit         => Step + Transition(DecimalInteger);
	Symbol + '"'  => Step + Transition(String);
	Symbol + !'"' => Step + Transition(Symbol);
	Whitespace    => End + Step;
	Newline       => End + Step;
	              => Error + End + Step;
}

Identifier {
	NonDigit  => Step;
	Digit     => Step;
	'_'       => Step;
	          => End + Transition(Unknown);
}

String {
	'\\' + State(0) => State(1) + Step;
	'"'  + State(0) => End + Step + Transition(Unknown);
	'\n' + State(0) => Error + End + Transition(Unknown);
                    => Step;
}

BinaryInteger {
	Digit => Step;
	'\''  => Step;
	      => End + Transition(Unknown);
}

OctalInteger {
	Digit => Step;
	'\''  => Step;
	      => End + Transition(Unknown);
}

DecimalInteger {
	Digit => Step;
	'b'   => Step + Transition(BinaryInteger);
	'B'   => Step + Transition(BinaryInteger);
	'o'   => Step + Transition(OctalInteger);
	'O'   => Step + Transition(OctalInteger);
	'x'   => Step + Transition(HexInteger);
	'X'   => Step + Transition(HexInteger);
	'e'   => Step + Transition(Float);
	'E'   => Step + Transition(Float);
	'.'   => Step + Transition(Float);
	'\''  => Step;
	      => End + Transition(Unknown);
}

HexInteger {
	Digit => Step;
	'p'   => Step + Transition(HexFloat);
	'P'   => Step + Transition(HexFloat);
	'a'   => Step;
	'A'   => Step;
	'b'   => Step;
	'B'   => Step;
	'c'   => Step;
	'C'   => Step;
	'd'   => Step;
	'D'   => Step;
	'e'   => Step;
	'E'   => Step;
	'f'   => Step;
	'F'   => Step;
	'\''  => Step;
	      => End + Transition(Unknown);
}

Float {
	Digit => Step;
	'e'   => Step;
	'E'   => Step;
	'+'   => Step;
	'-'   => Step;
	'\''  => Step;
	      => End + Transition(Unknown);
}

HexFloat {
	Digit => Step;
	'a'   => Step;
	'A'   => Step;
	'b'   => Step;
	'B'   => Step;
	'c'   => Step;
	'C'   => Step;
	'd'   => Step;
	'D'   => Step;
	'e'   => Step;
	'E'   => Step;
	'f'   => Step;
	'F'   => Step;
	'p'   => Step;
	'P'   => Step;
	'+'   => Step;
	'-'   => Step;
	'\''  => Step;
	      => End + Transition(Unknown);
}

Symbol {
	State(0) + '[' => State(1) + Step;
	State(0) + ']' => State(2) + Step;
	State(0) + ':' => State(3) + Step;
	State(1) + '[' => End + Step + Transition(Unknown);
	State(2) + ']' => End + Step + Transition(Unknown);
	State(3) + ':' => End + Step + Transition(Unknown);
	               => End + Transition(Unknown);
}

Comment {
	State(1) + '*'         => Step + Transition(MultilineComment);
	State(1) + !'/' + !'*' => Step + Transition(Symbol);
	'\n'                   => End + Transition(Unknown);
	                       => Step;
}

MultilineComment {
	State(0) + '*' => State(1) + Step;
	State(1) + '/' => End + Step + Transition(Unknown);
	               => Step;
}