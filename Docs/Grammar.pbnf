!MainRule  = Declarations;
!Tokenizer = "Tokens.tknz"

Declarations: Declaration*;

Declaration?:
	FunctionDeclaration;

FunctionDeclaration: Attributes Typename Identifier Parameters CompountStatement;

Statements: Statement*;
Statement?:
	EmptyStatement;
	CompoundStatement;
	Declaration;
EmptyStatement: ";";
CompoundStatement: "{" Statements "}";

Parameters: "(" (Parameter ("," Parameter)*)? ")";
Parameter:  Attributes TypeQualifiers Typename Identifier;

Arguments: "(" (Argument ("," Argument)*)? ")";
Argument:  Literal;

Attributes: ("[[" (Attribute ("," Attribute)*)? "]]")?;
Attribute:  Identifier Arguments;

Typename:       (Identifier "::")* Identifier;
TypeQualifiers: TypeQualifier*;
TypeQualifier:  "in" | "out" | "inout";

Literal?:
	IntegerLiteral;
	FloatLiteral;
	BoolLiteral;

IntegerLiteral:
	BinaryIntegerLiteral;
	OctalIntegerLiteral;
	DecimalIntegerLiteral;
	HexIntegerLiteral;

FloatLiteral:
	DecimalFloatLiteral;
	HexFloatLiteral;

BoolLiteral: "false" | "true";

BinaryIntegerLiteral?:  Token(BinaryInteger, ("0b" | "0B") ("'"? BinaryDigit)*);
OctalIntegerLiteral?:   Token(OctalInteger, ("0o" | "0O") ("'"? OctalDigit)*);
DecimalIntegerLiteral?: Token(DecimalInteger, ("'"? DecimalDigit)*);
HexIntegerLiteral?:     Token(HexInteger, ("0x" | "0X") ("'"? HexDigit)*);
DecimalFloatLiteral?:   Token(Float, ("'"? DecimalDigit)+ "." ("'"? DecimalDigit)* (("e" | "E") ("+" | "-")? ("'"? DecimalDigit)*)?)
HexFloatLiteral?:       Token(HexFloat, ("0x" | "0X") ("'"? HexDigit)+ "." ("'"? HexDigit)* (("p" | "P") ("+" | "-")? ("'"? HexDigit)*)?)
BinaryDigit?:           "0" | "1";
OctalDigit?:            BinaryDigit | "2" | "3" | "4" | "6" | "7";
DecimalDigit?:          OctalDigit | "8" | "9";
HexDigit?:              DecimalDigit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f";

Identifier: Token(Identifier);