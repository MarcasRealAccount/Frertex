!MainRule       = TranslationUnit;
!SpaceMethod    = "Whitespace";
!SpaceDirection = "Both";

TranslationUnit: Declaration*;

Declaration?:
	FunctionDeclaration;

FunctionDeclaration: Attributes Typename Identifier Parameters CompoundStatement;

Statements: Statement*;
Statement?:
	EmptyStatement;
	ExpressionStatement;
	CompoundStatement;
	ReturnStatement;
	Declaration;
EmptyStatement:      ";";
ReturnStatement:     "return" (Expression | BracedInitList)? ";";
CompoundStatement:   "{" Statements "}";
ExpressionStatement: Expression ";";

Expression?:          AssignmentExpression;
AssignmentExpression: Identifier "=" InitializerClause;

InitializerClause?:
	AssignmentExpression;
	BracedInitList;

BracedInitList: "{" InitializerClause "}";

Parameters: "(" (Parameter ("," Parameter)*)? ")";
Parameter:  Attributes Typename Identifier;

Attributes: "[[" (Attribute ("," Attribute)*)? "]]";
Attribute:  Identifier Arguments;

Arguments: "(" (Argument ("," Argument)*)? ")";
Argument:  Literal;

Typename:       TypeQualifiers Identifier;
TypeQualifiers: TypeQualifier*;
TypeQualifier:  "in" | "out" | "inout";

Identifier: NonDigit (NonDigit | Digit)*;
NonDigit?:  '[A-Za-z_]';

Literal:
	IntegerLiteral;
	FloatLiteral;
	BoolLiteral;

IntegerLiteral:
	BinaryLiteral IntegerSuffix?;
	OctalLiteral IntegerSuffix?;
	DecimalLiteral IntegerSuffix?;
	HexadecimalLiteral IntegerSuffix?;
BinaryLiteral?:            ("0b" | "0B") BinaryDigit ("'"? BinaryDigit)*;
OctalLiteral?:             ("0o" | "0O") OctalDigit ("'"? OctalDigit)*;
DecimalLiteral?:           DigitSequence;
HexadecimalLiteral?:       HexadecimalPrefix HexadecimalDigitSequence;
BinaryDigit?:              '[01]';
OctalDigit?:               '[0-7]';
Digit?:                    '[0-9]';
HexadecimalDigit?:         '[0-9A-Fa-f]';
HexadecimalPrefix?:        "0x" | "0X";
HexadecimalDigitSequence?: HexadecimalDigit ("'"? HexadecimalDigit)*;
DigitSequence?:            Digit ("'"? Digit)*;

IntegerSuffix?:
	UnsignedSuffix (ShortSuffix | LongSuffix)?;
	(ShortSuffix | LongSuffix) UnsignedSuffix?;
UnsignedSuffix?: "U" | "u";
ShortSuffix?:    "S" | "s";
LongSuffix?:     "L" | "l";

FloatLiteral:
	DecimalFloatLiteral;
	HexadecimalFloatLiteral;
DecimalFloatLiteral?:
	FractionalConstant ExponentPart? FloatSuffix?;
	DigitSequence ExponentPart FloatSuffix?;
HexadecimalFloatLiteral?:
	HexadecimalPrefix HexadecimalFractionalConstant BinaryExponentPart FloatSuffix?;
	HexadecimalPrefix HexadecimalDigitSequence BinaryExponentPart FloatSuffix?;
FractionalConstant:
	DigitSequence? "." DigitSequence;
	DigitSequence ".";
HexadecimalFractionalConstant?:
	HexadecimalDigitSequence? "." HexadecimalDigitSequence;
	HexadecimalDigitSequence ".";
ExponentPart?:       ("e" | "E") Sign? DigitSequence;
BinaryExponentPart?: ("p" | "P") Sign? DigitSequence;
Sign?:               "+" | "-";
FloatSuffix:         "h" | "H" | "f" | "F" | "d" | "D";

BoolLiteral: "false" | "true";